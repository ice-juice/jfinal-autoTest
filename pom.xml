<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.demo</groupId>
  <artifactId>jfinal_demo_for_maven</artifactId>
  <packaging>jar</packaging>
  <version>4.0</version>
  <name>jfinal_demo_for_maven</name>
  <url>http://jfinal.com/user/1</url>
  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
  </properties>
  
  	<!-- 使用阿里 maven 库 -->
	<repositories>
		<repository>
			<id>ali-maven</id>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</snapshots>
		</repository>
	</repositories>
	
	<!-- 添加快照版本库,updatePolicy: always、daily、interval、never -->
	<!-- repositories>
    <repository>
           <id>sonatype-nexus-snapshots</id>
           <name>Sonatype Nexus Snapshots</name>
           <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
           <releases>
               <enabled>false</enabled>
           </releases>
           <snapshots>
               <enabled>true</enabled>
               <updatePolicy>daily</updatePolicy>
           </snapshots>
       </repository>
  	</repositories -->
	
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
    	<groupId>com.jfinal</groupId>
    	<artifactId>jfinal-undertow</artifactId>
    	<version>1.6</version>
    </dependency>
    
    <dependency>
    	<groupId>com.jfinal</groupId>
    	<artifactId>jfinal</artifactId>
    	<version>4.0</version>
    </dependency>
    
    <!-- 避免控制台输出如下提示信息：
		 SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
		 项目中实际上用不到这个 jar 包，本 jfinal demo 用不上这个依赖，在此仅为大家
		 在未来基于 jfinal demo 为模板做开发时做准备工作
		 注意：eclipse 下可以将 scope 设置为 provided
		 -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-nop</artifactId>
		<version>1.7.25</version>
		<!-- 打包前改成 provided，此处使用 compile 仅为支持 IDEA -->
		<scope>compile</scope>
	</dependency>
    
    <dependency>
    	<groupId>log4j</groupId>
    	<artifactId>log4j</artifactId>
    	<version>1.2.16</version>
    </dependency>
    <dependency>
    	<groupId>mysql</groupId>
    	<artifactId>mysql-connector-java</artifactId>
    	<version>5.1.44</version>
    </dependency>
	<dependency>
		<groupId>com.alibaba</groupId>
		<artifactId>druid</artifactId>
		<version>1.0.29</version>
	</dependency>
    <dependency>
    	<groupId>com.jfinal</groupId>
    	<artifactId>cos</artifactId>
    	<version>2017.5</version>
    </dependency>


	  <dependency>
		  <groupId>org.testng</groupId>
		  <artifactId>testng</artifactId>
		  <version>6.14.2</version>
		  <!--            <scope>test</scope>-->
	  </dependency>
	  <!-- 加入reportNG依赖，代替testNG测试报告 -->
	  <dependency>
		  <groupId>org.uncommons</groupId>
		  <artifactId>reportng</artifactId>
		  <version>1.1.4</version>
		  <!--            <scope>test</scope>-->
		  <exclusions>
			  <exclusion>
				  <groupId>org.testng</groupId>
				  <artifactId>testng</artifactId>
			  </exclusion>
		  </exclusions>
	  </dependency>
	  <!-- 加入selenium做webUI测试,选用selenium2 -->
	  <dependency>
		  <groupId>org.seleniumhq.selenium</groupId>
		  <artifactId>selenium-java</artifactId>
		  <version>2.53.1</version>
	  </dependency>
	  <!-- 依赖Guice -->
	  <dependency>
		  <groupId>com.google.inject</groupId>
		  <artifactId>guice</artifactId>
		  <version>3.0</version>
		  <scope>test</scope>
	  </dependency>

	  <!--xml组件-->
	  <dependency>
		  <groupId>dom4j</groupId>
		  <artifactId>dom4j</artifactId>
		  <version>1.6.1</version>
	  </dependency>
	  <dependency>
		  <groupId>com.fasterxml.jackson.core</groupId>
		  <artifactId>jackson-core</artifactId>
		  <version>2.9.5</version>
	  </dependency>
	  <dependency>
		  <groupId>com.fasterxml.jackson.core</groupId>
		  <artifactId>jackson-databind</artifactId>
		  <version>2.9.10.8</version>
	  </dependency>

	  <!--Jackson是一款高性能的JSON处理器-->
	  <dependency>
		  <groupId>org.codehaus.jackson</groupId>
		  <artifactId>jackson-mapper-asl</artifactId>
		  <version>1.9.13</version>
	  </dependency>
	  <!--用于将bean，映射，集合，Java数组和XML转换为JSON的Java库。-->
	  <dependency>
		  <groupId>net.sf.json-lib</groupId>
		  <artifactId>json-lib</artifactId>
		  <version>2.4</version>
		  <classifier>jdk15</classifier>
	  </dependency>

  </dependencies>
  
  <build>
    <finalName>jfinal_demo_for_maven</finalName>
	    <plugins>
	    	<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<!-- java8 保留参数名编译参数 -->
					<compilerArgument>-parameters</compilerArgument>
					<compilerArguments><verbose/></compilerArguments>
				</configuration>
			</plugin>
			
			<!--
				jar 包中的配置文件优先级高于 config 目录下的 "同名文件"
				因此，打包时需要排除掉 jar 包中来自 src/main/resources 目录的
				配置文件，否则部署时 config 目录中的同名配置文件不会生效
			 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<excludes>
						<exclude>*.txt</exclude>
						<exclude>*.xml</exclude>
						<exclude>*.properties</exclude>
					</excludes>
				</configuration>
			</plugin>
			
			<!-- 
				使用 mvn clean package 打包 
				更多配置可参考官司方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html
	 		-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						
						<configuration>
							<!-- 打包生成的文件名 -->
							<finalName>${project.artifactId}</finalName>
							<!-- jar 等压缩文件在被打包进入 zip、tar.gz 时是否压缩，设置为 false 可加快打包速度 -->
							<recompressZippedFiles>false</recompressZippedFiles>
							<!-- 打包生成的文件是否要追加 release.xml 中定义的 id 值 -->
							<appendAssemblyId>true</appendAssemblyId>
							<!-- 指向打包描述文件 package.xml -->
							<descriptors>
								<descriptor>package.xml</descriptor>
							</descriptors>
							<!-- 打包结果输出的基础目录 -->
							<outputDirectory>${project.build.directory}/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 加入maven-surefire-plugin插件用来使用maven执行用例，其中suiteXmlFile配置的就是testNG用例执行文件的地址 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.21.0</version>
				<configuration>
					<suiteXmlFiles>
						<suiteXmlFile>src/test/java/testNG.xml</suiteXmlFile>
					</suiteXmlFiles>
					<!-- 加入编码设置，否则生成的报告会中文乱码 -->
					<argLine>-Dfile.encoding=UTF-8</argLine>
				</configuration>
			</plugin>
			<!-- 添加插件,添加ReportNg的监听器，修改最后的TestNg的报告 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<properties>
						<property>
							<name>usedefaultlisteners</name>
							<value>false</value>
						</property>
						<property>
							<name>listener</name>
							<value>org.uncommons.reportng.HTMLReporter</value>
						</property>
					</properties>
					<workingDirectory>target/</workingDirectory>
					<!-- <forkMode>always</forkMode> -->
				</configuration>
			</plugin>

	  </plugins>
  </build>
</project>